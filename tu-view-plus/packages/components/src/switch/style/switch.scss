@use 'sass:map';
@use '../../../style/mixins.scss' as *;
@use '../../../style/var.scss' as *;
@use '../../../style/utils.scss' as *;

// 开关最小宽度
$switch-core-width-map: (
  mini: 30px,
  small: 40px,
  medium: 50px,
  large: 60px
);

// 开关高度
$switch-core-height-map: (
  mini: 16px,
  small: 20px,
  medium: 24px,
  large: 28px
);

// 开关内部按钮尺寸
$switch-button-size-map: (
  mini: 10px,
  small: 14px,
  medium: 18px,
  large: 22px
);

// 内部文字内边距
$switch-content-padding-map: (
  mini: 2px,
  small: 4px,
  medium: 6px,
  large: 8px
);

@include b(switch) {
  display: inline-flex;
  align-items: center;
  position: relative;
  font-size: $tu-font-size;
  vertical-align: middle;

  &:hover:not(.is-disabled) {
    @include e(core) {
      box-shadow: none;
      border-color: $tu-color-shadow-light;
    }
  }

  @include e(input) {
    position: absolute;
    width: 0;
    height: 0;
    opacity: 0;
    margin: 0;
  }

  @include e(core) {
    display: inline-flex;
    position: relative;
    align-items: center;
    box-sizing: border-box;
    cursor: pointer;
    border: 1px solid transparent;
    transition: all $tu-transition-duration-2
      $tu-transition-timing-function-accelerate;
    box-shadow: $tu-shadow-inside-outside;
    color: $tu-color-white;

    &::after {
      content: '';
      position: absolute;
      z-index: 1;
      width: 100%;
      height: 100%;
      transition: all $tu-transition-duration-2;
    }

    @include e(action) {
      display: flex;
      justify-content: center;
      align-items: center;
      position: absolute;
      z-index: 2;
      left: 2px;
      transition: all $tu-transition-duration-2;
      background-color: $tu-color-text-placeholder;
    }

    @include e(inner) {
      position: relative;
      z-index: 2;
      width: 100%;
      transition: all $tu-transition-duration-2;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
      color: $tu-color-text-placeholder;

      @include m((icon, text)) {
        line-height: 1;
        user-select: none;
        @include utils-ellipsis;
      }
    }
  }

  @include e(label) {
    display: inline-block;
    cursor: pointer;
    vertical-align: center;
    line-height: 1;
    transition: all $tu-transition-duration-2;
    color: $tu-color-text;

    @include when(active) {
      color: $tu-color-primary;
    }

    @include m(left) {
      margin-right: 8px;
    }

    @include m(right) {
      margin-left: 8px;
    }

    & * {
      line-height: 1;
      display: inline-block;
    }
    .#{$namespace}-icon {
      height: inherit;

      svg {
        vertical-align: middle;
      }
    }
  }

  @include when(checked) {
    @include e(core) {
      color: $tu-color-primary;

      &::after {
        background: $tu-color-primary;
        box-shadow: inset 2px 2px 4px $tu-color-primary-dark,
          inset -2px -2px 4px $tu-color-primary-light;
      }

      @include e(action) {
        left: calc(100% - 1px);
        transform: translateX(-100%);
        background-color: $tu-color-text-light;
      }

      @include e(inner) {
        color: $tu-color-white;
      }
    }
  }

  @each $size in (mini, small, medium, large) {
    @include m($size) {
      @include e(core) {
        min-width: map-get($switch-core-width-map, $size);
        height: map-get($switch-core-height-map, $size);

        @include e(action) {
          border-radius: calc(map-get($switch-button-size-map, $size) / 2);
          width: map-get($switch-button-size-map, $size);
          height: map-get($switch-button-size-map, $size);
        }

        @include e(inner) {
          font-size: map-get($font-size-map, $size);
          padding-left: calc(map-get($switch-button-size-map, $size) + 3px);
          padding-right: map-get($switch-content-padding-map, $size);
        }
      }

      @include e(label) {
        font-size: map-get($font-size-map, $size);
      }

      @include when(checked) {
        @include e(core) {
          @include e(inner) {
            padding-left: map-get($switch-content-padding-map, $size);
            padding-right: calc(map-get($switch-button-size-map, $size) + 3px);
          }
        }
      }

      &:active:not(.is-disabled) {
        @include e(core) {
          @include e(action) {
            width: calc(map-get($switch-button-size-map, $size) * 1.3);
          }
        }
      }
    }
  }

  @include m(circle) {
    @include e(core) {
      border-radius: $tu-border-radius-full;

      &::after {
        border-radius: $tu-border-radius-full;
      }
    }
  }

  @include m(round) {
    @include e(core) {
      border-radius: $tu-border-radius;

      &::after {
        border-radius: $tu-border-radius;
      }

      @include e(action) {
        border-radius: $tu-border-radius;
      }
    }
  }

  @include when(disabled) {
    cursor: not-allowed;
    opacity: 0.7;

    @include e(core) {
      cursor: not-allowed;
      box-shadow: none;
      background: $tu-color-base-bg;
    }
  }
}
