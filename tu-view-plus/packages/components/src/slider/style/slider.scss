@use 'sass:map';
@use '../../../style/mixins.scss' as *;
@use '../../../style/var.scss' as *;

$slider-track-size-map: (
  mini: 4px,
  small: 6px,
  medium: 8px,
  large: 10px
);
$slider-button-size-map: (
  mini: 10px,
  small: 14px,
  medium: 18px,
  large: 22px
);

@include b(slider) {
  display: inline-flex;
  align-items: center;
  width: 100%;

  @include e(track) {
    position: relative;
    flex: 1;
    width: 100%;
    cursor: pointer;

    &::before {
      content: '';
      position: absolute;
      display: block;
      width: 100%;
      border-radius: $tu-border-radius-full;
      box-shadow: $tu-shadow-inside;
    }

    @include e(bar) {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
    }

    @include e(ticks) {
      @include e(tick) {
        position: absolute;
        top: 0;
        width: 1px;
        transform: translate(-50%, -50%);
        box-shadow: $tu-shadow-inside-outside-small;
        opacity: 0.7;

        @include when(active) {
          box-shadow: none;
          background: $tu-color-base-bg;
          opacity: 0.3;
        }
      }
    }

    @include e(dots) {
      height: 100%;

      @include e(dot-wrap) {
        position: absolute;
        top: 50%;
        transform: translate(-50%, -50%);

        @include e(dot) {
          box-sizing: border-box;
          border-radius: 50%;
          background-color: $tu-color-white;
          opacity: 0.7;
        }
      }
    }

    @include e(marks) {
      position: absolute;
      width: 100%;

      @include e(mark) {
        position: absolute;
        color: $tu-color-text;
        line-height: 1;
        transform: translateX(-50%);
        cursor: pointer;
      }
    }

    @include e(button) {
      position: absolute;
      border-radius: 50%;
      user-select: none;
      box-shadow: 0 1px 3px 0px $tu-color-shadow-dark;
      background-color: $tu-color-white;
      transition: transform $tu-transition-duration-2;

      &::after {
        content: '';
        position: absolute;
        border-radius: 50%;
        width: 50%;
        height: 50%;
        box-shadow: $tu-shadow-inside;
        margin: auto;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }

      &:hover,
      &.hover {
        cursor: grab;
      }

      &.dragging {
        cursor: grabbing;
      }
    }

    @include when(disabled) {
      &::before {
        box-shadow: none;
        background: $tu-color-base-bg;
        opacity: 0.7;
      }

      @include e(bar) {
        opacity: 0.3;
        background: $tu-color-primary;
      }

      @include e(button) {
        &:hover,
        &.hover {
          cursor: not-allowed;
        }
      }
    }
  }

  @include e(input) {
    display: flex;
    align-items: center;
    margin-left: 10px;

    .#{$namespace}-input-number {
      margin-left: 10px;
    }
  }

  @include m(horizontal) {
    @include e(track) {
      &::before {
        top: 50%;
        transform: translateY(-50%);
      }

      @include e(bar) {
        border-top-left-radius: $tu-border-radius-full;
        border-bottom-left-radius: $tu-border-radius-full;
        background: linear-gradient(
          -45deg,
          $tu-color-primary-dark 0%,
          $tu-color-primary 50%,
          $tu-color-primary-light 100%
        );
      }

      @include e(button) {
        transform: translateX(-50%);

        &:hover,
        &.hover,
        &.dragging {
          transform: scale(1.1) translateX(-50%);
        }
      }
    }
  }

  @include m(vertical) {
    display: inline-block;
    width: auto;
    height: auto;

    @include e(track) {
      height: 100%;
      min-height: 200px;
      margin-right: 0;
      transform: translateY(0);

      &::before {
        top: unset;
        left: 50%;
        height: 100%;
        transform: translateX(-50%);
      }

      @include e(bar) {
        top: unset;
        left: 50%;
        height: unset;
        transform: translateX(-50%);
        border-bottom-left-radius: $tu-border-radius-full;
        border-bottom-right-radius: $tu-border-radius-full;
        background: linear-gradient(
          180deg,
          $tu-color-primary-dark 0%,
          $tu-color-primary 50%,
          $tu-color-primary-light 100%
        );
      }

      @include e(ticks) {
        @include e(tick) {
          top: unset;
          left: 50%;
          height: 1px;
        }
      }

      @include e(marks) {
        top: 0;
        height: 100%;

        @include e(mark) {
          transform: translateY(50%);
        }
      }

      @include e(dots) {
        @include e(dot-wrap) {
          top: unset;
          left: 50%;
          transform: translate(-50%, 50%);
        }
      }

      @include e(button) {
        bottom: 0;
        transform: translateY(50%);

        &:hover,
        &.hover,
        &.dragging {
          transform: scale(1.1) translateY(50%);
        }
      }
    }
  }

  @each $size in (mini, small, medium, large) {
    @include m($size) {
      @include e(track) {
        @include e(dot) {
          width: map-get($slider-track-size-map, $size);
          height: map-get($slider-track-size-map, $size);
        }

        @include e(button) {
          width: map-get($slider-button-size-map, $size);
          height: map-get($slider-button-size-map, $size);
        }

        @include m(horizontal) {
          &::before {
            height: map-get($slider-track-size-map, $size);

            @if $size == mini {
              box-shadow: $tu-shadow-inside-small;
            }
          }

          @include e(bar) {
            height: map-get($slider-track-size-map, $size);
          }

          @include e(tick) {
            height: map-get($slider-track-size-map, $size);
          }

          @include e(marks) {
            top: map-get($slider-button-size-map, $size);

            @include e(mark) {
              font-size: map-get($font-size-map, $size);
            }
          }

          @include e(button) {
            top: calc((map-get($slider-button-size-map, $size) / 2) * -1);
            left: calc((map-get($slider-button-size-map, $size) / 2) * -1);
          }
        }

        @include m(vertical) {
          &::before {
            width: map-get($slider-track-size-map, $size);

            @if $size == mini {
              box-shadow: $tu-shadow-inside-small;
            }
          }

          @include e(bar) {
            width: map-get($slider-track-size-map, $size);
          }

          @include e(marks) {
            left: calc(map-get($slider-button-size-map, $size) + 8px);
          }

          @include e(ticks) {
            @include e(tick) {
              width: map-get($slider-track-size-map, $size);
            }
          }
        }
      }

      &.#{$namespace}-slider--vertical {
        min-width: map-get($slider-button-size-map, $size);
      }
    }
  }
}
