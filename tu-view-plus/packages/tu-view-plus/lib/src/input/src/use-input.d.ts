import { InputProps, InputEmits } from './input';
import type { ShallowRef, SetupContext } from 'vue';
export default function useInput(props: InputProps, emit: SetupContext<InputEmits>['emit'], input: ShallowRef<HTMLInputElement | undefined>): {
    inputRef: import("vue").ComputedRef<HTMLInputElement | undefined>;
    isHovering: import("vue").Ref<boolean>;
    isFocused: import("vue").Ref<boolean>;
    isPasswordVisible: import("vue").Ref<boolean>;
    nativeInputValue: import("vue").ComputedRef<string>;
    textLength: import("vue").ComputedRef<number>;
    focus: () => Promise<void>;
    blur: () => void | undefined;
    select: () => void | undefined;
    clear: () => void;
    handleMouseEnter: (evt: MouseEvent) => void;
    handleMouseLeave: (evt: MouseEvent) => void;
    handleCompositionStart: (evt: CompositionEvent) => void;
    handleCompositionUpdate: (evt: CompositionEvent) => void;
    handleCompositionEnd: (evt: CompositionEvent) => void;
    handleInput: (evt: Event) => Promise<void>;
    handleFocus: (evt: FocusEvent) => void;
    handleBlur: (evt: FocusEvent) => void;
    handleChange: (evt: Event) => void;
    handleKeydown: (evt: KeyboardEvent) => void;
    handlePasswordVisible: () => void;
    setNativeInputValue: () => void;
};
